params {
  outdir = 'results'
  help = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

  ref = "$baseDir/data/MN908947.3.fa"
  ref_gb = "$baseDir/data/MN908947.3.gb"
  primers = "$baseDir/data/SARS-COV-2_spikePrimers.bed"

  single_end = false
  skip_trim_adapters = false
  readPaths = false
  qpcr_primers = "$baseDir/data/qpcr_primers.bed"
  ercc_fasta = "$baseDir/data/ercc_sequences.fasta"

  samQualThreshold = 20

  minDepth = 10

  clades = "$baseDir/data/clades.tsv"

  // assumes about 20 mutations between 2 random samples
  // (this is an overestimate to increase sensitivity)
  bcftoolsCallTheta = 0.0006

  exclude_samples = ""

// iVar defaults
  ivarQualThreshold = 20
  ivarFreqThreshold = 0.6
  mpileupDepth = 0

// QUAST
  maxNs = 100
  minLength = 29000
  no_reads_quast = false

  kraken2_db = ""

// Analysis params
  sample_vcfs = false

// Nextstrain data
  nextstrain_sequences = ""
  nextstrain_ncov = "https://raw.githubusercontent.com/nextstrain/ncov/master/"
  subsample = 200
  sequences_per_group_1 = 500
  sequences_per_group_2 = 20
  sample_metadata = false
  sample_sequences = false
  group_by = 'division year month'


// detect intrahost variants
   intrahost_variants = false
   intrahost_ploidy = 2
   intrahost_min_frac = 0.2
   intrahost_variants_cpu = 4

// Output documentation
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

process {

  cpus = { check_max( 2 * task.attempt, 'cpus') }
  memory = { check_max( 4.GB * task.attempt, 'memory') }
  time = { check_max( 1.h * task.attempt, 'time') }

  //maxRetries = 3
  //maxErrors = '-1'

  container = 'czbiohub/sc2-msspe'

  withLabel:'process_large' {
    cpus = { check_max(8, 'cpus') }
    memory = { check_max(16.GB, 'memory') }
    time = { check_max (4.h, 'time')}
  }
  withLabel:'process_medium' {
    cpus = { check_max(4, 'cpus') }
    memory = { check_max(8.GB, 'memory') }
    time = { check_max (2.h, 'time')}
  }
  withLabel:'process_small' {
    cpus = { check_max(2, 'cpus') }
    memory = { check_max(4.GB, 'memory') }
    time = { check_max (1.h, 'time')}
  }
  withLabel:'process_tiny' {
    cpus = { check_max(1, 'cpus') }
    memory = { check_max(2.GB, 'memory') }
    time = { check_max (1.h, 'time')}
  }

}

// Profiles
profiles {
  conda { process.conda = "$baseDir/environment.yaml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  awsbatch { includeConfig 'conf/awsbatch.config' }
  test { includeConfig 'conf/test.config' }
  test_nextstrain { includeConfig 'conf/test_nextstrain.config' }
  test_fasta_reads { includeConfig 'conf/test_fasta_reads.config' }
  test_awsbatch { includeConfig 'conf/test_awsbatch.config' }
  fasta_reads { includeConfig 'conf/fasta_reads.config' }
}
